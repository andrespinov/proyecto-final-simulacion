function maquinas(X, Y, Xtest, Ytest, kernel)
%MAQUINAS entrena, valida y testea un conjunto de muestras de clasificación
%con el módelo de Máquinas de Soporte Vectorial.
%
%	Descripción
%	MAQUINAS(X, Y, Xtrain, Ytrain) 
%
    porcentaje = 0.7; % Porcentaje para la partición
    numClases = length(unique(Ytest));
    folds = 10;
    
    boxConstraints = [0.01, 0.1, 1, 10, 100];
    gammas = [0.01, 0.1, 1, 10, 100];
    if(kernel == 1)
        gammaCount = 1;
    else
        gammaCount = length(gammas);
    end
    
    % Normalización de los conjuntos
    [X, mu, sigma] = zscore(X);
    Xtest = normalizar(Xtest, mu, sigma);
    Eficiencia = zeros(length(boxConstraints), gammaCount);
    for w = 1:3
        for i = 1: length(boxConstraints)
            boxConstraint = boxConstarints(i);
            Texto = strcat('Box Constraint = ', {' '}, num2str(boxConstraint));
            disp(Texto);
            for j = 1:gammaCount
                gamma = gammas(j);
                EficienciaVal = zeros(1,Rept);
                if(gammaCount ~= 1)
                    Texto = strcat('Gamma = ', {' '}, num2str(gamma));
                    disp(Texto);
                end
                for fold = 1:folds
                    % Se hace la partición entre los conjuntos de entrenamiento y validación      
                    [Xtrain, Ytrain, Xval, Yval] = bootstrapping(X,Y, porcentaje);

                    % Entrenamiento de los modelos. Se usa la metodologia One vs All
                    % Se separan las muestras y se entrena un modelo para cada clase

                    Ytrain1 = Ytrain;
                    Ytrain1(Ytrain1 ~= 1) =- 1;
                    Modelo1 = entrenarSVM(Xtrain, Ytrain1, boxConstraint, gamma, kernel);

                    Ytrain2 = Ytrain;
                    Ytrain2(Ytrain2 ~= 2) =- 1;
                    Ytrain2(Ytrain2 == 2) = 1;
                    Modelo2 = entrenarSVM(Xtrain, Ytrain2, boxConstraint, gamma, kernel);

                    Ytrain3 = Ytrain;
                    Ytrain3(Ytrain3 ~= 3) =- 1;
                    Ytrain3(Ytrain3 == 3) = 1;
                    Modelo3 = entrenarSVM(Xtrain, Ytrain3, boxConstraint, gamma, kernel);

                    Ytrain4 = Ytrain;
                    Ytrain4(Ytrain4 ~= 4) =- 1;
                    Ytrain4(Ytrain4 == 4) = 1;
                    Modelo4 = entrenarSVM(Xtrain, Ytrain4, boxConstraint, gamma, kernel);

                    % Se hacen las predicciones en base a cada uno de los clasificadores entrenados

                    [~,YestContinuo1] = testSVM(Modelo1, Xval);
                    [~,YestContinuo2] = testSVM(Modelo2, Xval);
                    [~,YestContinuo3] = testSVM(Modelo3, Xval);
                    [~,YestContinuo4] = testSVM(Modelo4, Xval);

                    % Se realiza la prediccion en base al mayor

                    YestContinuo = [YestContinuo1, YestContinuo2, YestContinuo3, YestContinuo4];
                    [~,Yesti] = max(YestContinuo, [], 2);

                    % Se calculan la eficiencia general
                    EficienciaVal(fold) = (sum(Yesti == Yval))/length(Yval);
                end
                Eficiencia(i,j) = mean(EficienciaVal);
                Texto = strcat('La eficiencia general es = ', {' '}, num2str(Eficiencia(i,j)));
                disp(Texto);
            end
        end
        maximo = max(max(Eficiencia));
        [indX,indY] = find(Eficiencia == maximo);
        disp('La mejor eficiencia fue para los parámetros:');
        boxEstimado = boxConstraints(indX);
        gammaEstimado = gammas(indY);
        Texto = strcat('Box Constraint = ', {' '}, num2str(boxEstimado));
        disp(Texto);
        if(gammaCount ~= 1)
            Texto = strcat('Gamma = ', {' '}, num2str(gammaEstimado));
            disp(Texto);
        end
        % Entrenamiento de los modelos. Se usa la metodologia One vs All
        % Se separan las muestras y se entrena un modelo para cada clase

        Ytrain1 = Y;
        Ytrain1(Ytrain1 ~= 1) =- 1;
                Modelo1 = entrenarSVM(X, Ytrain1, boxEstimado, gammaEstimado, kernel);

                Ytrain2 = Y;
                Ytrain2(Ytrain2 ~= 2) =- 1;
                Ytrain2(Ytrain2 == 2) = 1;
                Modelo2 = entrenarSVM(X, Ytrain2, boxEstimado, gammaEstimado, kernel);

                Ytrain3 = Y;
                Ytrain3(Ytrain3 ~= 3) =- 1;
                Ytrain3(Ytrain3 == 3) = 1;
                Modelo3 = entrenarSVM(X, Ytrain3, boxEstimado, gammaEstimado, kernel);

                Ytrain4 = Y;
                Ytrain4(Ytrain4 ~= 4) =- 1;
                Ytrain4(Ytrain4 == 4) = 1;
                Modelo4 = entrenarSVM(X, Ytrain4, boxEstimado, gammaEstimado, kernel);

                % Se hacen las predicciones en base a cada uno de los clasificadores entrenados

                [~,YestContinuo1] = testSVM(Modelo1, Xtest);
                [~,YestContinuo2] = testSVM(Modelo2, Xtest);
                [~,YestContinuo3] = testSVM(Modelo3, Xtest);
                [~,YestContinuo4] = testSVM(Modelo4, Xtest);

                % Se realiza la prediccion en base al mayor

                YestContinuo = [YestContinuo1, YestContinuo2, YestContinuo3, YestContinuo4];
                [~,Yesti] = max(YestContinuo, [], 2);

                % Se calculan la matriz de confusión
                MatrizConfusion = zeros(numClases, numClases);
                for m = 1:size(Xtest,1)
                    MatrizConfusion(Yesti(m),Ytest(m)) = MatrizConfusion(Yesti(m),Ytest(m)) + 1;
                end
                % Se calculan las eficiencias de acuerdo a la matriz de
                % confusión
                Eficiencia = sum(diag(MatrizConfusion))/sum(MatrizConfusion(:));
                Texto = strcat('La eficiencia general es = ', {' '}, num2str(Eficiencia));
                disp(Texto);
                for m = 1:numClases
                    Texto = strcat('Clase', {' '}, num2str(m));
                    disp(Texto);
                    EficienciaP = (MatrizConfusion(m,m)/sum(MatrizConfusion(:,m)));
                    EficienciaU = (MatrizConfusion(m,m)/sum(MatrizConfusion(m,:)));
                    Texto = strcat ('Eficiencia de productor = ', {' '}, num2str(EficienciaP));
                    disp(Texto);
                    Texto = strcat ('Eficiencia de usuario = ', {' '}, num2str(EficienciaU));
                    disp(Texto);
                end
    end
end

